<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!-- 配置自动扫描的包,多个包中间使用半角逗号分隔 -->
    <context:component-scan base-package="com.fei" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    <!--
        由于DispatcherServlet的请求拦截规则是  "/" 拦截的所有,配置了<mvc:default-servlet-handler/>将在 SpringMVC 上下文中定义一个DefaultServletHttpRequestHandler
        它会对进入 DispatcherServlet的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由 WEB 应用服务器默认的 Servlet 处理，
        如果不是静态资源的请求，才由DispatcherServlet 继续处理 一般 WEB 应用服务器默认的 Servlet 的名称都是 default。若所使用的
        WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定
     -->
    <mvc:default-servlet-handler/>


    <!--
        如果没有业务处理,只是为了请求在WEB-INF下的页面或者是资源,使用mvc:view-controller标记即可
        如果配置了该标签.<mvc:annotation-driven/>必须显示配置
        path:请求地址
        view-name:视图名称(要符合ViewResolver的规则)
        <mvc:view-controller path="/test" view-name="success"/>
    -->
    <!--
        开启对@RequestMapping的支持
         conversion-service="conversionService"
    -->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"/>
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <!-- 如果不指定则默认使用classpath下的ValidationMessages.properties -->
        <property name="validationMessageSource">
            <bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
                <property name="basename" value="classpath:users" />
                <property name="fileEncodings" value="utf-8" />
                <property name="cacheSeconds" value="120" />
            </bean>
        </property>
    </bean>

    <!--配置视图解析器:把controller返回值解析为实际的物理视图-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="i18n"/>
</bean>



    <!--
        ConversionServiceFactoryBean会在springmvc注入一个DefaultConversionService
    -->
<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
    <property name="converters">
        <set>
            <bean class="com.fei.converters.UsersConverter"/>
        </set>
    </property>
</bean>

    <!--配置特定的异常转向特定的页面-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!--配置错误信息属性名称,默认是exception(前端可以拿到该信息)-->
        <property name="exceptionAttribute" value="exception"/>
        <!--指定具体的错误转向的异常页面-->
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
    </bean>


    <!--拦截器 -->
    <mvc:interceptors>
        <!--多个拦截器,顺序执行 -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.fei.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>
</beans>